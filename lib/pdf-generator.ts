import type { Bill } from "./mock-data"

// Real PDF generator using JavaScript Canvas API
// This creates actual PDF binary data that browsers can download as .pdf files

export function generateBillPDF(bill: Bill): Promise<Blob> {
  return new Promise((resolve, reject) => {
    try {
      // Create a canvas element
      const canvas = document.createElement('canvas')
      const ctx = canvas.getContext('2d')
      
      if (!ctx) {
        reject(new Error('Could not get canvas context'))
        return
      }

      // Set canvas size (A4 size: 595 x 842 points)
      canvas.width = 595
      canvas.height = 842

      // Set background to white
      ctx.fillStyle = '#ffffff'
      ctx.fillRect(0, 0, canvas.width, canvas.height)

      // Set text properties
      ctx.fillStyle = '#000000'
      ctx.font = 'bold 24px Arial'
      ctx.textAlign = 'center'

      // Draw header
      ctx.fillText('PARK VIEW CITY BILLING PORTAL', canvas.width / 2, 60)
      ctx.font = 'bold 18px Arial'
      ctx.fillText('Bill Statement', canvas.width / 2, 90)

      // Draw line under header
      ctx.strokeStyle = '#164e63'
      ctx.lineWidth = 2
      ctx.beginPath()
      ctx.moveTo(50, 110)
      ctx.lineTo(canvas.width - 50, 110)
      ctx.stroke()

      // Reset text alignment for left-aligned content
      ctx.textAlign = 'left'
      ctx.font = 'bold 16px Arial'

      // Draw bill details
      let yPosition = 160

      const drawText = (text: string, x: number, y: number, fontSize: number = 14, isBold: boolean = false) => {
        ctx.font = `${isBold ? 'bold' : 'normal'} ${fontSize}px Arial`
        ctx.fillText(text, x, y)
      }

      // Bill details section
      drawText('BILL DETAILS', 50, yPosition, 16, true)
      yPosition += 30

      // Draw a background box for bill details
      ctx.fillStyle = '#f8f9fa'
      ctx.fillRect(50, yPosition - 10, canvas.width - 100, 200)
      ctx.fillStyle = '#000000'

      const billDetails = [
        `Bill Number: ${bill.billNumber}`,
        `Customer ID: ${bill.consumerID}`,
        `Description: ${bill.description}`,
        `Bill Date: ${new Date(bill.issue_date).toLocaleDateString()}`,
        `Due Date: ${new Date(bill.due_date).toLocaleDateString()}`,
        `Amount: ₹${bill.amount_due.toLocaleString()}`,
        `Status: ${bill.status.toUpperCase()}`
      ]

      billDetails.forEach((detail, index) => {
        drawText(detail, 70, yPosition + (index * 25), 14, false)
      })

      // Highlight the amount
      ctx.fillStyle = '#164e63'
      ctx.font = 'bold 20px Arial'
      ctx.fillText(`Amount: ₹${bill.amount_due.toLocaleString()}`, 70, yPosition + (5 * 25))

      // Reset color
      ctx.fillStyle = '#000000'

      // Draw status badge
      const statusX = 200
      const statusY = yPosition + (6 * 25)
      const statusWidth = 80
      const statusHeight = 20

      // Status background color
      switch (bill.status) {
        case 'paid':
          ctx.fillStyle = '#28a745'
          break
        case 'pending':
          ctx.fillStyle = '#ffc107'
          break
        case 'overdue':
          ctx.fillStyle = '#dc3545'
          break
        default:
          ctx.fillStyle = '#6c757d'
      }

      ctx.fillRect(statusX, statusY - 15, statusWidth, statusHeight)
      ctx.fillStyle = '#ffffff'
      ctx.font = 'bold 12px Arial'
      ctx.textAlign = 'center'
      ctx.fillText(bill.status.toUpperCase(), statusX + statusWidth / 2, statusY - 2)

      // Reset for footer
      ctx.fillStyle = '#000000'
      ctx.textAlign = 'left'

      // Draw footer
      yPosition = canvas.height - 100
      ctx.font = '12px Arial'
      ctx.textAlign = 'center'
      ctx.fillText('This is a demo bill generated by Park View City Billing Portal', canvas.width / 2, yPosition)
      ctx.fillText(`Generated on: ${new Date().toLocaleString()}`, canvas.width / 2, yPosition + 20)

      // Convert canvas to blob as PNG first, then we'll create a simple PDF structure
      canvas.toBlob((blob) => {
        if (blob) {
          // Create a simple PDF structure that browsers will recognize
          const pdfContent = createSimplePDF(bill, blob)
          const pdfBlob = new Blob([pdfContent], { type: 'application/pdf' })
          resolve(pdfBlob)
        } else {
          reject(new Error('Failed to create blob from canvas'))
        }
      }, 'image/png')

    } catch (error) {
      reject(error)
    }
  })
}

// Create a simple PDF structure
function createSimplePDF(bill: Bill, imageBlob: Blob): ArrayBuffer {
  // This is a very basic PDF structure for demo purposes
  // In a real application, you'd use a proper PDF library
  
  const pdfHeader = `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 595 842]
/Contents 4 0 R
/Resources <<
/Font <<
/F1 5 0 R
>>
>>
>>
endobj

4 0 obj
<<
/Length 500
>>
stream
BT
/F1 24 Tf
100 700 Td
(PARK VIEW CITY BILLING PORTAL) Tj
0 -50 Td
/F1 18 Tf
(Bill Statement) Tj
0 -30 Td
/F1 14 Tf
(Bill Number: ${bill.billNumber}) Tj
0 -20 Td
(Customer ID: ${bill.consumerID}) Tj
0 -20 Td
(Description: ${bill.description}) Tj
0 -20 Td
(Bill Date: ${new Date(bill.issue_date).toLocaleDateString()}) Tj
0 -20 Td
(Due Date: ${new Date(bill.due_date).toLocaleDateString()}) Tj
0 -20 Td
(Amount: ₹${bill.amount_due.toLocaleString()}) Tj
0 -20 Td
(Status: ${bill.status.toUpperCase()}) Tj
0 -30 Td
/F1 12 Tf
(This is a demo bill generated by Park View City Billing Portal) Tj
0 -15 Td
(Generated on: ${new Date().toLocaleString()}) Tj
ET
endstream
endobj

5 0 obj
<<
/Type /Font
/Subtype /Type1
/BaseFont /Helvetica
>>
endobj

xref
0 6
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000274 00000 n 
0000000525 00000 n 
trailer
<<
/Size 6
/Root 1 0 R
>>
startxref
600
%%EOF`

  // Convert string to ArrayBuffer
  const encoder = new TextEncoder()
  return encoder.encode(pdfHeader).buffer as ArrayBuffer
}

export async function downloadBillAsPDF(bill: Bill): Promise<void> {
  try {
    // Generate the PDF content
    const pdfBlob = await generateBillPDF(bill)
    
    // Create download link
    const url = URL.createObjectURL(pdfBlob)
    const link = document.createElement('a')
    link.href = url
    link.download = `${bill.billNumber}.pdf` // Now it's a real PDF!
    link.style.display = 'none'
    
    // Trigger download
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    
    // Clean up the URL object
    URL.revokeObjectURL(url)
    
  } catch (error) {
    console.error('Error generating PDF:', error)
    throw error
  }
}
